{"version":3,"sources":["assets/entradas.svg","assets/saidas.svg","assets/total.svg","services/api.ts","hooks/useTransactions.tsx","components/Summary/styles.ts","components/Summary/index.tsx","components/TransactionsTable/styles.ts","components/TransactionsTable/index.tsx","components/Dashboard/styles.ts","components/Dashboard/index.tsx","assets/logo.svg","components/header/styles.ts","components/header/index.tsx","components/NewTransactionModal/styles.ts","assets/close.svg","components/NewTransactionModal/index.tsx","styles/global.ts","App.tsx","index.tsx"],"names":["api","axios","create","baseURL","TransactionsContext","createContext","TransactionsProvider","children","useState","transactions","setTransactions","transactionInput","a","post","createdAt","Date","response","transaction","data","useEffect","get","then","Provider","value","createTransaction","useTransactions","useContext","Container","styled","div","Summary","summary","reduce","acc","type","deposits","amount","total","withdraws","src","incomeImg","alt","Intl","NumberFormat","style","currency","format","outcomeImg","className","totalImg","TransactionsTable","map","title","category","DateTimeFormat","id","main","Dashboard","header","Content","Header","onOpenNewTransactionModal","logoImg","onClick","form","TransactionTypeContainer","colors","green","red","RadioBox","button","props","isActive","transparentize","activeColor","darken","NewTransactionModal","isOpen","onRequestClose","setTitle","setAmount","setCategory","setType","event","preventDefault","overlayClassName","closeImg","onSubmit","placeholder","onChange","target","Number","GlobalStyle","createGlobalStyle","App","isNewTransactionModalOpen","setIsNewTransactionModalOpen","Modal","setAppElement","createServer","models","Model","seeds","server","db","loadData","routes","this","namespace","passthrough","schema","all","request","JSON","parse","requestBody","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9b5a7e52.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/entradas.6106d856.svg\";","export default __webpack_public_path__ + \"static/media/saidas.34032f7e.svg\";","export default __webpack_public_path__ + \"static/media/total.f3c3c7de.svg\";","import axios from 'axios';\r\n\r\nexport const api = axios.create ({\r\n    baseURL: 'https://brunooaps.github.io/DTmoney-Curso-Rocketseat/api',\r\n})","import { createContext, useEffect, useState, ReactNode, useContext } from 'react'\r\nimport { api } from '../services/api';\r\n\r\ninterface Transaction {\r\n    id: string,\r\n    title: string,\r\n    amount: number,\r\n    type: string,\r\n    category: string,\r\n    createdAt: string\r\n}\r\n\r\ntype TransactionInput = Omit<Transaction, 'id' | 'createdAt'>;\r\n\r\ninterface TransactionProviderProps {\r\n    children: ReactNode;\r\n}\r\n\r\ninterface TransactionsContextData {\r\n    transactions: Transaction[];\r\n    createTransaction: (transaction: TransactionInput) => Promise<void>;\r\n}\r\n\r\nexport const TransactionsContext= createContext<TransactionsContextData>(\r\n    {} as TransactionsContextData\r\n);\r\n\r\nexport function TransactionsProvider({children}: TransactionProviderProps) {\r\n    const [transactions, setTransactions] = useState<Transaction[]>([]);\r\n\r\n    useEffect(() => {\r\n        api.get('transactions')\r\n            .then(response => setTransactions(response.data.transactions))\r\n    }, []);\r\n\r\n    async function createTransaction(transactionInput: TransactionInput) {\r\n        const response = await api.post('/transactions', {\r\n            ...transactionInput,\r\n            createdAt: new Date()\r\n        })\r\n        const { transaction } = response.data;\r\n\r\n        setTransactions([\r\n            ...transactions,\r\n            transaction,\r\n        ]);\r\n    }\r\n\r\n    return (\r\n        <TransactionsContext.Provider value={{ transactions, createTransaction }}>\r\n            {children}\r\n        </TransactionsContext.Provider>\r\n    )\r\n}\r\n\r\nexport function useTransactions() {\r\n    const context = useContext(TransactionsContext);\r\n    \r\n    return context;\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n    display: grid;\r\n    grid-template-columns: repeat(3, 1fr);\r\n    gap: 2rem;\r\n    margin-top: -10rem;\r\n\r\n    div {\r\n        background: var(--shape);\r\n        padding: 1.5rem 2rem;\r\n        border-radius: 0.25rem;\r\n        color: var(--text-title);\r\n        \r\n        header {\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: space-between;\r\n        }\r\n\r\n        strong {\r\n            display: block;\r\n            margin-top: 1rem;\r\n            font-size: 2rem;\r\n            font-weight: 500;\r\n            line-height: 3rem;\r\n        }\r\n\r\n        &.highlight-background {\r\n            background: var(--green);\r\n            color: #FFF;\r\n        }\r\n    }\r\n`","import incomeImg from \"../../assets/entradas.svg\"\r\nimport outcomeImg from \"../../assets/saidas.svg\"\r\nimport totalImg from \"../../assets/total.svg\"\r\nimport { useTransactions } from \"../../hooks/useTransactions\";\r\nimport { Container } from \"./styles\";\r\n\r\nexport function Summary() {\r\n    const { transactions } = useTransactions()\r\n\r\n    const summary = transactions.reduce((acc, transactions) => {\r\n        if(transactions.type === 'deposit') {\r\n            acc.deposits += transactions.amount;\r\n            acc.total += transactions.amount;\r\n        } else {\r\n            acc.withdraws += transactions.amount\r\n            acc.total -= transactions.amount;\r\n        }\r\n\r\n        return acc;\r\n    }, \r\n    {\r\n        deposits: 0,\r\n        withdraws: 0,\r\n        total: 0\r\n    })\r\n\r\n    return(\r\n        <Container>\r\n            <div>\r\n                <header>\r\n                    <p>Entradas</p>\r\n                    <img src={incomeImg} alt=\"Entradas\" />\r\n                </header>\r\n                <strong>\r\n                {new Intl.NumberFormat('pt-BR', {\r\n                    style: 'currency',\r\n                    currency: \"BRL\"\r\n                }).format(summary.deposits)}\r\n                </strong>\r\n            </div>\r\n            <div>\r\n                <header>\r\n                    <p>Saidas</p>\r\n                    <img src={outcomeImg} alt=\"Saidas\" />\r\n                </header>\r\n                <strong>\r\n                    -\r\n                    {new Intl.NumberFormat('pt-BR', {\r\n                        style: 'currency',\r\n                        currency: \"BRL\"\r\n                    }).format(summary.withdraws)}\r\n                </strong>\r\n            </div>\r\n            <div className=\"highlight-background\">\r\n                <header>\r\n                    <p>Total</p>\r\n                    <img src={totalImg} alt=\"Total\" />\r\n                </header>\r\n                <strong>\r\n                    {new Intl.NumberFormat('pt-BR', {\r\n                        style: 'currency',\r\n                        currency: \"BRL\"\r\n                    }).format(summary.total)}\r\n                </strong>\r\n            </div>\r\n        </Container>\r\n    );\r\n}","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n    margin-top: 4rem;\r\n\r\n    table {\r\n        width: 100%;\r\n        border-spacing: 0 0.5rem;\r\n\r\n        th {\r\n            color: var(--text-body);\r\n            font-weight: 400;\r\n            padding: 1rem 2rem;\r\n            text-align: left;\r\n            line-height: 1.5rem;\r\n        }\r\n\r\n        td{\r\n            padding: 1rem 2rem;\r\n            border: 0;\r\n            background: var(--shape);\r\n            color: var(--text-body);\r\n            border-radius: 0.25rem;\r\n\r\n            &:first-child{\r\n                color: var(--text-title);\r\n            }\r\n\r\n            &.deposit{\r\n                color: var(--green);\r\n            }\r\n\r\n            &.withdraw{\r\n                color: var(--red);\r\n            }\r\n        }\r\n    }\r\n`;","import { useTransactions } from \"../../hooks/useTransactions\";\r\nimport { Container } from \"./styles\";\r\n\r\n\r\n\r\nexport function TransactionsTable() {\r\n    const { transactions } = useTransactions()\r\n\r\n    return(\r\n        <Container>\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Título</th>\r\n                        <th>Valor</th>\r\n                        <th>Categoria</th>\r\n                        <th>Data</th>\r\n                    </tr>\r\n                </thead>\r\n\r\n                <tbody>\r\n                    {transactions.map(transaction => {\r\n                        return (\r\n                        <tr key={transaction.id}>\r\n                            <td>{transaction.title}</td>\r\n                            <td className={transaction.type}>\r\n                                {new Intl.NumberFormat('pt-BR', {\r\n                                style: 'currency',\r\n                                currency: \"BRL\"\r\n                                }).format(transaction.amount)}\r\n                            </td>\r\n                            <td>{transaction.category}</td>\r\n                            <td>\r\n                                {new Intl.DateTimeFormat('pt-BR').format(\r\n                                    new Date (transaction.createdAt)\r\n                                )}\r\n                            </td>\r\n                        </tr>\r\n                        )\r\n                    })}                    \r\n                </tbody>\r\n            </table>\r\n        </Container>\r\n    )\r\n}","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.main`\r\n    max-width: 1120px;\r\n    margin: 0 auto;\r\n    padding: 2.5rem 1rem;\r\n`;","import { Summary } from \"../Summary\";\r\nimport { TransactionsTable } from \"../TransactionsTable\";\r\nimport { Container } from \"./styles\";\r\n\r\nexport function Dashboard() {\r\n    return(\r\n        <Container>\r\n            <Summary />\r\n            <TransactionsTable />\r\n        </Container>\r\n    );\r\n}","export default __webpack_public_path__ + \"static/media/logo.b30f412f.svg\";","import styled from \"styled-components\"\r\n\r\nexport const Container = styled.header`\r\n    background: var(--blue);\r\n`\r\n\r\nexport const Content = styled.div`\r\n    max-width: 1120px;\r\n    margin: 0 auto;\r\n\r\n    padding: 2rem 1rem 12rem;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n\r\n    button {\r\n        font-size: 1rem;\r\n        color: #FFF;\r\n        background: var(--blue-light);\r\n        border: 0;\r\n        padding: 0 2rem;\r\n        border-radius: 0.25rem;\r\n        height: 3rem;\r\n\r\n        transition: filter 0.2s;\r\n\r\n        &:hover {\r\n            filter: brightness(0.8);\r\n        }\r\n    }\r\n`","import logoImg from \"../../assets/logo.svg\"\r\nimport { Container, Content } from \"./styles\"\r\n\r\ninterface HeaderProps {\r\n    onOpenNewTransactionModal: () => void;\r\n}\r\n\r\nexport function Header({ onOpenNewTransactionModal }: HeaderProps) {\r\n    \r\n    return(\r\n        <Container>\r\n            <Content>\r\n                <img src={logoImg} alt=\"dt money\" />\r\n                <button type=\"button\" onClick={onOpenNewTransactionModal}>\r\n                    Nova transação\r\n                </button>\r\n            </Content>\r\n        </Container>\r\n    )\r\n}","import styled from \"styled-components\"\r\nimport { darken, transparentize } from 'polished'\r\n\r\nexport const Container = styled.form`\r\n    h2 {\r\n        color: var(--text-title);\r\n        font-size: 1.5rem;\r\n        margin-bottom: 2rem;\r\n    }\r\n\r\n    input {\r\n        width: 100%;\r\n        padding: 0 1.5rem;\r\n        height: 4rem;\r\n        border-radius: 0.25rem;\r\n        background: #e7e9ee;\r\n        border: 1px solid ;\r\n        font-weight: 400;\r\n        font-size: 1rem;\r\n\r\n        &::placeholder{\r\n            color: var(--text-body);\r\n        }\r\n\r\n        & + input {\r\n            margin-top: 1rem;\r\n        }\r\n    }\r\n\r\n    button[type=\"submit\"] {\r\n        width: 100%;\r\n        padding: 0 1.5rem;\r\n        height: 4rem;\r\n        background: var(--green);\r\n        color: #fff;\r\n        border-radius: 0.25rem;\r\n        border: 0;\r\n        font-size: 1rem;\r\n        margin-top: 1.5rem;\r\n        transition: filter 0.2s;\r\n        font-weight: 600;\r\n\r\n        &:hover {\r\n            filter: brightness(0.9);\r\n        }\r\n    }\r\n`;\r\n\r\nexport const TransactionTypeContainer = styled.div`\r\n    margin: 1rem 0;\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n    gap: 0.5rem;\r\n`;\r\n\r\ninterface RadioBoxProps {\r\n    isActive: boolean;\r\n    activeColor: 'green' | 'red'\r\n}\r\n\r\nconst colors = {\r\n    green: '#33CC95',\r\n    red: '#E52E4D'\r\n}\r\n\r\nexport const RadioBox = styled.button<RadioBoxProps>`\r\n  height: 4rem;\r\n        border: 1px solid #d7d7d7;\r\n        border-radius: 0.25rem;\r\n        background: ${(props) => props.isActive ? transparentize(0.8, colors[props.activeColor]) : 'transparent'};\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n\r\n        transition: border-color 0.2s;\r\n\r\n        &:hover {\r\n            border-color: ${darken(0.3, '#d7d7d7')};\r\n        }\r\n\r\n        img{\r\n            height: 20px;\r\n            width: 20px;\r\n        }\r\n\r\n        span {\r\n            display: inline-block;\r\n            margin-left: 1rem;\r\n            font-size: 1rem;\r\n            color: var(--text-title);\r\n        }\r\n`;","export default __webpack_public_path__ + \"static/media/close.cefaa90c.svg\";","import Modal from 'react-modal'\r\nimport { Container, TransactionTypeContainer, RadioBox } from './styles'\r\nimport closeImg from \"../../assets/close.svg\"\r\nimport incomeImg from \"../../assets/entradas.svg\"\r\nimport outcomeImg from \"../../assets/saidas.svg\"\r\nimport { FormEvent, useState, useContext } from 'react'\r\nimport { api } from '../../services/api'\r\nimport { TransactionsContext, useTransactions } from '../../hooks/useTransactions'\r\n\r\ninterface NewTransactionModalProps {\r\n    isOpen: boolean;\r\n    onRequestClose: () => void;\r\n}\r\n\r\nexport function NewTransactionModal({isOpen, onRequestClose}: NewTransactionModalProps) {\r\n    const { createTransaction } = useTransactions()\r\n\r\n    const [title, setTitle] = useState('');\r\n    const [amount, setAmount] = useState(0);\r\n    const [category, setCategory] = useState('');\r\n    const [type, setType] = useState('deposit');\r\n\r\n    async function handleCreateNewTransaction(event: FormEvent) {\r\n        event.preventDefault();\r\n\r\n        await createTransaction({\r\n            title,\r\n            amount,\r\n            category,\r\n            type\r\n        })\r\n\r\n        setTitle('');\r\n        setAmount(0);\r\n        setCategory('');\r\n        setType('deposit');\r\n        onRequestClose()\r\n    }\r\n\r\n    return (\r\n    <Modal \r\n        isOpen={isOpen} \r\n        onRequestClose={onRequestClose}\r\n        overlayClassName=\"react-modal-overlay\"\r\n        className=\"react-modal-content\"\r\n    >\r\n\r\n        <button \r\n            type=\"button\" \r\n            onClick={onRequestClose}\r\n            className=\"react-modal-close\"\r\n        >\r\n            <img src={closeImg} alt=\"Fechar Modal\" />\r\n        </button>   \r\n\r\n        <Container onSubmit={handleCreateNewTransaction}>\r\n            <h2>Cadastrar transação</h2>\r\n\r\n            <input placeholder=\"Titulo\" value={title} onChange={event => setTitle(event.target.value)}/>\r\n\r\n            <input type=\"Number\" placeholder=\"Valor\" value={amount} onChange={event => setAmount(Number(event.target.value))}/>\r\n\r\n            <TransactionTypeContainer>\r\n                <RadioBox \r\n                    type=\"button\" \r\n                    onClick={() => { setType('deposit'); }} \r\n                    isActive={type === 'deposit'}\r\n                    activeColor=\"green\"\r\n                >\r\n                    <img src={incomeImg} alt=\"Entrada\" />\r\n                    <p>Entrada</p>\r\n                </RadioBox>\r\n\r\n                <RadioBox \r\n                    type=\"button\" \r\n                    onClick={() => { setType('withdraw'); }} \r\n                    isActive={type === 'withdraw'}\r\n                    activeColor=\"red\"\r\n                >\r\n                    <img src={outcomeImg} alt=\"Saida\" />\r\n                    <p>Saida</p>\r\n                </RadioBox>\r\n            </TransactionTypeContainer>\r\n\r\n            <input placeholder=\"Categoria\" value={category} onChange={event => setCategory(event.target.value)}/>\r\n\r\n            <button type=\"submit\">Cadastrar</button>\r\n        </Container>\r\n    </Modal>\r\n    )\r\n}","import { createGlobalStyle } from \"styled-components\"\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n :root {\r\n     --background: #F0F2F5;\r\n     --red: #E52E4D;\r\n     --blue: #5429CC;\r\n     --green: #33CC95;\r\n     --blue-light: #6933FF;\r\n     --text-title: #363F5F;\r\n     --text-body: #969CB3;\r\n     --shape: #FFFFFF;\r\n }\r\n\r\n *{\r\n     margin: 0;\r\n     padding: 0;\r\n     box-sizing: border-box;\r\n }\r\n\r\n html {\r\n     @media (max-width: 1080px) {\r\n         font-size: 93.75%;\r\n     }\r\n\r\n     @media (max-width: 720px) {\r\n         font-size: 87.5%;\r\n     }\r\n }\r\n\r\n body {\r\n     background: var(--background);\r\n     -webkit-font-smoothing: antialised;\r\n }\r\n\r\n body, input, textarea, button {\r\n     font-family: 'Poppins', sans-serif;\r\n     font-weight: 400;\r\n }\r\n\r\n h1, h2, h3, h4, h5, h6, strong {\r\n     font-weight: 600;\r\n }\r\n\r\n button {\r\n     cursor: pointer;\r\n }\r\n\r\n [disabled] {\r\n     opacity: 0.6;\r\n     cursor: not-allowed;\r\n }\r\n\r\n.react-modal-overlay{\r\n    background: rgba(0, 0, 0, 0.5);\r\n    position: fixed;\r\n    top: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    right: 0;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n.react-modal-content{\r\n    width: 100%;\r\n    max-width: 576px;\r\n    background: var(--background);\r\n    padding: 3rem;\r\n    position: relative;\r\n    border-radius: 0.25rem;\r\n}\r\n.react-modal-close {\r\n    position: absolute;\r\n    right: 1.5rem;\r\n    top: 1.5rem;\r\n    border: 0;\r\n    background: transparent;\r\n    transition: filter 0.2s;\r\n    &:hover {\r\n        filter: brightness(0.8)\r\n    }\r\n}\r\n\r\n`","import { useState } from 'react';\r\nimport Modal from 'react-modal'\r\nimport { Dashboard } from \"./components/Dashboard\";\r\nimport { Header } from \"./components/header\";\r\nimport { NewTransactionModal } from './components/NewTransactionModal';\r\nimport { GlobalStyle } from \"./styles/global\";\r\nimport { TransactionsContext, TransactionsProvider } from './hooks/useTransactions';\r\n\r\nModal.setAppElement('#root');\r\n\r\nexport function App() {\r\n  const [isNewTransactionModalOpen, setIsNewTransactionModalOpen] = useState(false);\r\n\r\n    function handleOpenNewTransactionModal(){\r\n        setIsNewTransactionModalOpen(true);\r\n    }\r\n\r\n    function handleCloseNewTransactionModal(){\r\n        setIsNewTransactionModalOpen(false)\r\n    }\r\n\r\n  return (\r\n    <TransactionsProvider>\r\n      <Header onOpenNewTransactionModal={handleOpenNewTransactionModal}/>\r\n\r\n      <Dashboard />\r\n\r\n      <NewTransactionModal \r\n        isOpen={isNewTransactionModalOpen}\r\n        onRequestClose={handleCloseNewTransactionModal}\r\n      />\r\n\r\n      <GlobalStyle />\r\n    </TransactionsProvider>\r\n  );\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { createServer, Model } from 'miragejs'\r\nimport { App } from './App';\r\n\r\ncreateServer({\r\n  models: {\r\n    transaction: Model,\r\n  },\r\n\r\n  seeds(server) {\r\n    server.db.loadData({\r\n      transactions: []\r\n    })\r\n  },\r\n\r\n  routes() {\r\n    this.namespace=\"api\";\r\n    this.passthrough(\"https://brunooaps.github.io/DTmoney-Curso-Rocketseat/api/transactions\")\r\n\r\n    this.get('/transactions', () => {\r\n      return this.schema.all('transaction')\r\n    })\r\n\r\n    this.post('/transactions', (schema, request) => {\r\n      const data = JSON.parse(request.requestBody)\r\n\r\n      return schema.create('transaction', data);\r\n    })\r\n  }\r\n})\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}